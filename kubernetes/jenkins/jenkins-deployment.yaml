# https://github.com/marcel-dempers/docker-development-youtube-series/tree/master/jenkins
# RUN "jenkins-rbac.yaml" FIRST
---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-deployment
  namespace: jenkins
  labels:
    app: jenkins
    tier: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: jenkins
        tier: frontend
    spec:
      serviceAccountName: jenkins
      containers:
      - name: jenkins
        image: dalexander2israel/jenkins:lts-centos
        imagePullPolicy: Always
        resources:
          limits:
            memory: 2048Mi
            cpu: 256m
          requests:
            cpu: 200m
            memory: 1024Mi
        env:
        - name: DOCKER_HOST
          value: unix:///var/run/docker.sock
        - name: PROJECT_REPO_MAIN
          value: https://github.com/dellius-alexander/Testing-Strategy.git
        - name: JAVA_OPTS
          value: -Xmx2048m -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 
        - name: JENKINS_UC
          value: https://updates.jenkins.io/update-center.json
        - name: __KUBECONFIG__
          value: /var/jenkins_home/secrets/kubeconfig
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 50000
          protocol: TCP
        - containerPort: 80
          protocol: TCP
        volumeMounts:
        - mountPath: /var/jenkins_home
          name: jenkins
        - mountPath: /var/run/docker.sock
          name: docker-sock-volume
      restartPolicy: Always
      securityContext:
        runAsUser: 0
      terminationGracePeriodSeconds: 30
      volumes:
      - name: jenkins
        # emptyDir: {}  # Data is not persisted across pod failures
        persistentVolumeClaim:    # Data is persisted across pod failures
          claimName: jenkins-pvc
      - name: docker-sock-volume
        hostPath:
          path: /var/run/docker.sock


---




apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  annotations:
    autoscaling.alpha.kubernetes.io/conditions: '[{"type":"AbleToScale","status":"True","lastTransitionTime":"2020-11-04T21:13:37Z","reason":"SucceededGetScale","message":"the
      HPA controller was able to get the target''s current scale"},{"type":"ScalingActive","status":"False","lastTransitionTime":"2020-11-04T21:13:37Z","reason":"FailedGetResourceMetric","message":"the
      HPA was unable to compute the replica count: unable to get metrics for resource
      cpu: unable to fetch metrics from resource metrics API: the server could not
      find the requested resource (get pods.metrics.k8s.io)"}]'
  creationTimestamp: "2020-11-04T21:13:22Z"
  managedFields:
  - apiVersion: autoscaling/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:maxReplicas: {}
        f:minReplicas: {}
        f:scaleTargetRef:
          f:apiVersion: {}
          f:kind: {}
          f:name: {}
        f:targetCPUUtilizationPercentage: {}
    manager: kubectl-autoscale
    operation: Update
    time: "2020-11-04T21:13:22Z"
  - apiVersion: autoscaling/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:autoscaling.alpha.kubernetes.io/conditions: {}
      f:status:
        f:currentReplicas: {}
    manager: kube-controller-manager
    operation: Update
    time: "2020-11-04T23:31:02Z"
  name: jenkins-deployment
  namespace: jenkins
  resourceVersion: "2543102"
  selfLink: /apis/autoscaling/v1/namespaces/jenkins/horizontalpodautoscalers/jenkins-deployment
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: jenkins-deployment
  targetCPUUtilizationPercentage: 50
status:
  currentReplicas: 1
  desiredReplicas: 1



---

apiVersion: v1
kind: Service
metadata:
  name: jenkins-svc
  namespace: jenkins
  labels:
    app: jenkins
spec:
  selector:
    app: jenkins
  type: NodePort
  ports:
    - name: ui
      port: 8080
      targetPort: 8080      
      protocol: TCP
      nodePort: 32307
    - name: slave
      port: 50000
      targetPort: 50000
    - name: http
      port: 80
      targetPort: 80

---

# # Ingress Configuration for controller Option 1
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: jenkins-ingress
#   namespace: jenkins
#   annotations:
#     kubernetes.io/ingress.class: "nginx"
#     certmanager.k8s.io/cluster-issuer: letsencrypt-prod
#     nginx.ingress.kubernetes.io/rewrite-target: /
#     nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
#     nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, origin, accept
#     nginx.ingress.kubernetes.io/cors-allow-methods: GET, OPTIONS
#     nginx.ingress.kubernetes.io/enable-cors: "true"
#     nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#     nginx.ingress.kubernetes.io/affinity: "cookie"
#     nginx.ingress.kubernetes.io/session-cookie-name: "route"
#     nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
# spec:
#   # tls:
#   # - hosts:
#   #   - jenkins.dellius.app
#   #   secretName: tls-secret-jenkins
#   rules:
#   - host: jenkins.dellius.app
#     http:
#       paths:
#       - path: /login
#         pathType: Prefix
#         backend:
#           service:
#             name: jenkins-svc
#             port: 
#               name: ui
#       - path: /*
#         pathType: Prefix
#         backend:
#           service:
#             name: jenkins-svc
#             port: 
#               name: http

# ---

# # Ingress Configuration for controller Option 2
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: jenkins-ingress
#   Namespace: jenkins
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
#     nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
#     nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, origin, accept
#     nginx.ingress.kubernetes.io/cors-allow-methods: GET, OPTIONS
#     nginx.ingress.kubernetes.io/enable-cors: "true"
# spec:
#   rules:
#   - host: jenkins.dellius.app
#     http:
#       paths:
#       - path: /login
#         pathType: Prefix
#         backend:
#           service:
#             name: jenkins-svc
#             port: 
#               name: ui
