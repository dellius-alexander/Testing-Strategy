# https://github.com/marcel-dempers/docker-development-youtube-series/tree/master/jenkins
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-deployment
  namespace: jenkins
  labels:
    app: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccountName: jenkins
      containers:
      - name: jenkins
        image: jenkins/jenkins:lts
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "10Gi"
            cpu: "1000m"
          requests:
            cpu: 750m
            memory: 1024Mi
        env:
        - name: PROJECT_REPO_MAIN
          value: https://github.com/dellius-alexander/Testing-Strategy.git
        - name: JAVA_OPTS
          value: -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 
        - name: JENKINS_UC
          value: https://updates.jenkins.io/update-center.json
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 50000
          protocol: TCP
        volumeMounts:
        - mountPath: /var/jenkins_home
          name: jenkins
      restartPolicy: Always
      securityContext:
        runAsUser: 0
      terminationGracePeriodSeconds: 30
      volumes:
      - name: jenkins
        # emptyDir: {}  # Data is not persisted across pod failures
        persistentVolumeClaim:    # Data is persisted across pod failures
          claimName: jenkins-claim

---

apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
spec:
  type: NodePort  
  ports:
    - name: ui
      port: 8080
      targetPort: 8080
      protocol: TCP
      nodePort: 32307
    - name: slave
      port: 50000
      protocol: TCP
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app: jenkins


---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-ingress
  namespace: jenkins
  annotations:
    kubernetes.io/ingress.class: "nginx"
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
spec:
  tls:
  - hosts:
    - jenkins.dellius.app
    secretName: tls-secret-jenkins
  rules:
  - host: jenkins.dellius.app
    http:
      paths:
      - path: /
        backend:
          serviceName: jenkins
          servicePort: 8080